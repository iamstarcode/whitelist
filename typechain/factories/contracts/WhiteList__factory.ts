/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { WhiteList, WhiteListInterface } from "../../contracts/WhiteList";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_maxWhitelistedAddresses",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "addAddressToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxWhitelistedAddresses",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numAddressesWhitelisted",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelistedAddresses",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161062638038061062683398181016040528101906100329190610067565b806000806101000a81548160ff021916908360ff160217905550506100bd565b600081519050610061816100a6565b92915050565b60006020828403121561007d5761007c6100a1565b5b600061008b84828501610052565b91505092915050565b600060ff82169050919050565b600080fd5b6100af81610094565b81146100ba57600080fd5b50565b61055a806100cc6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306c933d81461005157806331a72188146100815780634011d7cd1461009f5780638e7314d9146100bd575b600080fd5b61006b600480360381019061006691906102a1565b6100c7565b6040516100789190610332565b60405180910390f35b6100896100e7565b604051610096919061038d565b60405180910390f35b6100a76100f8565b6040516100b4919061038d565b60405180910390f35b6100c561010b565b005b60016020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900460ff1681565b600260009054906101000a900460ff1681565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018f9061036d565b60405180910390fd5b60008054906101000a900460ff1660ff16600260009054906101000a900460ff1660ff16106101fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f39061034d565b60405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600260008282829054906101000a900460ff1661027291906103b9565b92506101000a81548160ff021916908360ff160217905550565b60008135905061029b8161050d565b92915050565b6000602082840312156102b7576102b661046a565b5b60006102c58482850161028c565b91505092915050565b6102d781610402565b82525050565b60006102ea602b836103a8565b91506102f58261046f565b604082019050919050565b600061030d6023836103a8565b9150610318826104be565b604082019050919050565b61032c8161042e565b82525050565b600060208201905061034760008301846102ce565b92915050565b60006020820190508181036000830152610366816102dd565b9050919050565b6000602082019050818103600083015261038681610300565b9050919050565b60006020820190506103a26000830184610323565b92915050565b600082825260208201905092915050565b60006103c48261042e565b91506103cf8361042e565b92508260ff038211156103e5576103e461043b565b5b828201905092915050565b60006103fb8261040e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f4d6f7265206164647265737365732063616e742062652061646465642c206c6960008201527f6d69742072656163686564000000000000000000000000000000000000000000602082015250565b7f53656e6465722068617320616c7265616479206265656e2077686974656c697360008201527f7465640000000000000000000000000000000000000000000000000000000000602082015250565b610516816103f0565b811461052157600080fd5b5056fea26469706673582212205c63b48a0e898c61f3504a106bd415627a336a87c48da3883ed73e0137dbc96664736f6c63430008070033";

type WhiteListConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhiteListConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WhiteList__factory extends ContractFactory {
  constructor(...args: WhiteListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _maxWhitelistedAddresses: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WhiteList> {
    return super.deploy(
      _maxWhitelistedAddresses,
      overrides || {}
    ) as Promise<WhiteList>;
  }
  override getDeployTransaction(
    _maxWhitelistedAddresses: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _maxWhitelistedAddresses,
      overrides || {}
    );
  }
  override attach(address: string): WhiteList {
    return super.attach(address) as WhiteList;
  }
  override connect(signer: Signer): WhiteList__factory {
    return super.connect(signer) as WhiteList__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhiteListInterface {
    return new utils.Interface(_abi) as WhiteListInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WhiteList {
    return new Contract(address, _abi, signerOrProvider) as WhiteList;
  }
}
