/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Whitelist,
  WhitelistInterface,
} from "../../../contracts/WhiteList.sol/Whitelist";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_maxWhitelistedAddresses",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WhiteList__MoreAddresCantBeAdded",
    type: "error",
  },
  {
    inputs: [],
    name: "WhiteList__SenderAlreadyWhiteListed",
    type: "error",
  },
  {
    inputs: [],
    name: "addAddressToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxWhitelistedAddresses",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numAddressesWhitelisted",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelistedAddresses",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104df3803806104df83398181016040528101906100329190610067565b806000806101000a81548160ff021916908360ff160217905550506100bd565b600081519050610061816100a6565b92915050565b60006020828403121561007d5761007c6100a1565b5b600061008b84828501610052565b91505092915050565b600060ff82169050919050565b600080fd5b6100af81610094565b81146100ba57600080fd5b50565b610413806100cc6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306c933d81461005157806331a72188146100815780634011d7cd1461009f5780638e7314d9146100bd575b600080fd5b61006b6004803603810190610066919061028f565b6100c7565b60405161007891906102da565b60405180910390f35b6100896100e7565b60405161009691906102f5565b60405180910390f35b6100a76100f8565b6040516100b491906102f5565b60405180910390f35b6100c561010b565b005b60016020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900460ff1681565b600260009054906101000a900460ff1681565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661018e576040517f755fa89200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900460ff1660ff16600260009054906101000a900460ff1660ff1610156101ea576040517f3a31f3a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600260008282829054906101000a900460ff166102609190610310565b92506101000a81548160ff021916908360ff160217905550565b600081359050610289816103c6565b92915050565b6000602082840312156102a5576102a46103c1565b5b60006102b38482850161027a565b91505092915050565b6102c581610359565b82525050565b6102d481610385565b82525050565b60006020820190506102ef60008301846102bc565b92915050565b600060208201905061030a60008301846102cb565b92915050565b600061031b82610385565b915061032683610385565b92508260ff0382111561033c5761033b610392565b5b828201905092915050565b600061035282610365565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b6103cf81610347565b81146103da57600080fd5b5056fea2646970667358221220f3d673a5bac8f8833119cdf0c383ae26ab33cc61f71209d6ad7dbd8cf3fbe45d64736f6c63430008070033";

type WhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Whitelist__factory extends ContractFactory {
  constructor(...args: WhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _maxWhitelistedAddresses: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Whitelist> {
    return super.deploy(
      _maxWhitelistedAddresses,
      overrides || {}
    ) as Promise<Whitelist>;
  }
  override getDeployTransaction(
    _maxWhitelistedAddresses: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _maxWhitelistedAddresses,
      overrides || {}
    );
  }
  override attach(address: string): Whitelist {
    return super.attach(address) as Whitelist;
  }
  override connect(signer: Signer): Whitelist__factory {
    return super.connect(signer) as Whitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistInterface {
    return new utils.Interface(_abi) as WhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Whitelist {
    return new Contract(address, _abi, signerOrProvider) as Whitelist;
  }
}
